.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LIVE-MULTI-KERNEL 1"
.TH LIVE-MULTI-KERNEL 1 "2021-04-08" "Version 01.00.00" "antiX Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 3
\&  live\-multi\-kernel  \-\- Adjust the syslinux and grub bootloaders for
\&                        the antiX/MX live system to work with two
\&                        kernels.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    live\-multi\-kernel [options]
.Ve
.PP
Update live syslinux, isolinux, and grub bootloaders to deal with two
kernels.  Also update the intird.gz for both kernels.
.PP
Look for kernels named vmlinuz and vmlinuz[0\-9] in the kernel directory.
Update the initrd.gz file in this directory too if it's found.
.PP
The default settings are designed to work in the build-iso environment.
You can update a (normal) running live-usb with the \-\-live option.
You can update a mounted live-usb with the \-\-live\-usb=<dir> option where
<dir> is the directory where the live-usb is mounted.
.PP
You can also specify individual directories.  This will, of course,
over-ride defaults and defaults set by \-\-live and \-\-live\-usb options.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 10
\&  \-a \-\-antiX                 Set distro to antiX
\&  \-b \-\-bootload\-dir=<dir>    Directory under which we find bootloaders,
\&                               ignoring <iso\-dir>
\&  \-c \-\-color                 Set color scheme to: off|low|low2|bw|dark|high
\&  \-d \-\-data=<file>           File containing fill\-in\-the\-blank data
\&  \-D \-\-distro=<distro>       Either antiX or MX
\&  \-h \-\-help                  Show this usage then exit
\&  \-i \-\-iso\-dir=<dir>         Kernels and initrd under <iso\-dir>/antiX/
\&                             Bootloaders under <iso\-dir>/boot/
\&  \-k \-\-kernel\-dir=<dir>      Explicitly set directory to find kernels in
\&                               ignoring <iso\-dir>
\&  \-l \-\-live                  Assume we are updating a running live system
\&  \-L \-\-live\-usb=<dir>        Modify a live\-usb mounted at <dir>
\&  \-m \-\-MX                    Set distro to MX
\&  \-n \-\-no=<list>             Skip steps:
\&                             initrd rm\-modules isolinux syslinux grub cleanup delete
\&  \-q \-\-quiet                 Print much less
\&  \-s \-\-sqfs\-dir\-<dir>        Directory under which we get kernel modules
\&  \-S \-\-strict                Throw an error if 2 kernels aren\*(Aqt found.  Otherwise
\&                             we just report this to stdut and exit normally.
\&  \-t \-\-template\-dir=<dir>    Directory containing template files
\&  \-v \-\-version               Show version info then exit
\&  \-V \-\-verbose               Print more
\&  \-VV                        Be very verbose, print most commands
.Ve
.SS "Defaults"
.IX Subsection "Defaults"
The default mode is \f(CW\*(C`build\-iso\*(C'\fR so these are the default
directories and file:
.PP
.Vb 3
\&      iso\-dir: iso
\&     sqfs\-dir: sqfs
\&    data\-file: Output/bootloader\-data
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fIlive-multi-kernel\fR (\s-1LMK\s0) program is designed to upgrade an
existing single kernel live system to boot giving the user a choice
of two different kernels.  The system could be easily extended to
more than two kernels but that would require more user input and
there seems to be little call for it now.
.PP
In the \fIbuild-iso\fR environment you just need to install a 2nd kernel
package then copy the kernel to \f(CW\*(C`iso/antiX/vmlinuz{,[0\-9]}\*(C'\fR.
.PP
Then run Tools/live\-multi\-kernel.  We will update the initrd and
modify the bootloaders to handle the two kernels.
.PP
Currently the allowed filenames for live kernels are:
.PP
.Vb 1
\&    vmlinuz, vmlinuz[0\-9]
.Ve
.PP
You can use any two of these names.  The order the kernels will
appear is based on the alphabetical order of the kernel names, so
\&\f(CW\*(C`vmlinux\*(C'\fR comes first followed by \f(CW\*(C`vmlinuz0\*(C'\fR and so on.
.PP
We determine the order of the kernel versions with \f(CW\*(C`sort \-V\*(C'\fR.  The
newest kernel is labeled as \fIModern\fR and the older kernel is
labeled as \fILegacy\fR.  If you use two kernels that have the same
\&\f(CW\*(C`uname \-r\*(C'\fR then the labels may be assigned randomly.
.PP
This enables you to choose whether you want the \fIModern\fR kernel or
the \fILegacy\fR kernel to come first in the menus, determined by the
vmlinuz filenames you use.
.SH "DETAILS"
.IX Header "DETAILS"
By default we update the \fIisolinux\fR, \fIsyslinux\fR, and \fIgrub\fR bootloaaders.
.SH "Grub"
.IX Header "Grub"
\&\fIGrub\fR is the simplest.  We use a template grub.cfg file and fill in the
blanks based on the current system and the live kernels.
.SS "Isolinux and Syslinux"
.IX Subsection "Isolinux and Syslinux"
The \fIisolinux\fR and \fIsyslinux\fR bootloaders are changed in the same
way so we will only outline \fIisolinux\fR here.
.PP
We ues the existing gfx-cpio file as a template.  But we also have a
\&\f(CW\*(C`back800.jpg\*(C'\fR file in our template director that we use for the background
image.  If you want to change the background image then you also need to
change the image in the template.  There are also template files for the
top level menu (\f(CW\*(C`isolnux.cfg\*(C'\fR) and for each kernel menu (\f(CW\*(C`kernel0.cfg\*(C'\fR and
\&\f(CW\*(C`kernel1.cfg\*(C'\fR).
.PP
We end up with 3 config files and 3 cpio files in the \f(CW\*(C`isolinux\*(C'\fR directory:
.PP
.Vb 3
\&        Top Menu:  isolinux.cfg      top\-cpio   
\&    First Kernel:   kernel0.cfg      gfx\-cpio
\&   Second Kernel:   kernel1.cfg     gfx1\-cpio
.Ve
.PP
This allows us to save function key menu entires for each kernel and
it allows us to have different text written on the background image
for each menu.  The existence of a gfx-cpio file makes it easy to
repeatedly run \s-1LMK\s0 on the same system.
.SH "Input Information"
.IX Header "Input Information"
The \s-1LMK\s0 program uses four sources of informtion
.IP "The existing bootloaders" 4
.IX Item "The existing bootloaders"
We try to use as much of the existing bootloaders as possible.
For example, we edit the gfxboot.cfg instead of providing a
new new with the changes we need.
.IP "The bootloader-data file from build-iso" 4
.IX Item "The bootloader-data file from build-iso"
This file contains the data needed to customize our live bootloaders
for a specific distro and release.  Of course we need this same info
for the dual kernel bootloaders.
.IP "The two kernels we will boot" 4
.IX Item "The two kernels we will boot"
Currently the user is required to have both kernel packages
installed and to put both kernels in the live boot directory
(typically the \f(CW\*(C`/antiX/\*(C'\fR subdirectory) with any of the following
11 names:
.Sp
.Vb 1
\&    vmlinuz  vmlinuz[0\-9]
.Ve
.Sp
We get the kernel version information directly from the kernels
themselves.  The kernel with the lower version number is labeled as
\&\*(L"Legacy\*(R" and the kernel with the higher version number is lableled
\&\*(L"Modern\*(R".  We use the \f(CW\*(C`sort \-\-version\-sort\*(C'\fR command to determine
the version number order.
.Sp
The kernel with the vmlinuz{.[0\-9]} filename which is first
alphabetically will be the first to show up in the bootloader menus
regardless of whether it is the \fILegacy\fR or \fIModern\fR kernel.
.IP "The file system for the live system" 4
.IX Item "The file system for the live system"
We need this so we can put the modules from both kernels into a
single initrd.gz file.
.PP
In addition, we have our own template directory that contains
templates for the various .cfg files we need and also contains
a 800x600 background image for the Syslinux family of bootloaders
(using gfxboot).
.SH "MODES of OPERATION"
.IX Header "MODES of OPERATION"
There are three main modes of operation but these are for
convenience and the settings they provide (mainly where to
find files) can be manually over-ridden.
.IP "Build-iso Mode" 4
.IX Item "Build-iso Mode"
This is the default.  It is for use while running the build-iso
program, after iso/ and sqfs/ have been populated.  Install
a 2nd kernel package and copy the kernel to iso/antiX/ using one
of the vmlinuz names given above.  Then run Tools/live\-multi\-kernel.
.Sp
We will use:
.Sp
.Vb 4
\&   Output/bootloader\-data   version specific settings
\&   sqfs/(lib/modules)       kernel modules
\&   iso/boot/                bootloaders
\&   iso/antiX/               kernels and initrd.gz
.Ve
.IP "Live mode (\-\-live option)" 4
.IX Item "Live mode (--live option)"
This is for updating to dual kernel on a running live system.
Again install a kernel package and this time copy the kernel
to the /live/boot\-dev/antiX/ directory.  You \fIneed\fR to perform
a remaster after you have installed the kernel.
.Sp
We will use:
.Sp
.Vb 4
\&    /usr/share/antiX/bootloader\-data  version specific settings
\&    /live/linux/(lib/modules)         kernel modules
\&    /live/boot\-dev/boot/              bootloaders
\&    /live/boot\-dev/antiX/             kernels and initrd.gz
.Ve
.IP "Live-usb Mode (\-\-live\-usb=<directory>)" 4
.IX Item "Live-usb Mode (--live-usb=<directory>)"
This is designed for changing a live-usb to dual kernel
mode when it's mounted on a host system but it can also be
used more generally.  Again you will need to install the
2nd kernel on the live system and then remaster before we
can make it dual kernel.
.Sp
Assume \f(CW\*(C`\-\-live\-usb=<dir\*(C'\fR> was specified.  We will mount the
squashfs file <dir>/antiX/linuxfs in our work directory at
\&\fI\f(CI$WORK_DIR\fI/sqfs\fR.  Then we will use:
.Sp
.Vb 5
\&    $WORK_DIR/sqfs/usr/share/antiX/bootloader\-data
\&                                  version spefific settings
\&    $WORK_DIR/sqfs/(lib/modules)  find kernel modules
\&    <dir>/boot/                   bootloaders
\&    <dir>/antiX/                  kernels and initrd.gz file
.Ve
.PP
Of course these locations can be specified manually with
the options:
.PP
.Vb 6
\&  \-\-data=<file>             The bootloader data file
\&  \-\-iso\-dir=<dir>           Where to find kernels, initrd.gz
\&                              and bootloaders
\&  \-\-kernel\-dir=<dir>        Where to find kernels and initrd.gz
\&                              separate from the bootloaders
\&  \-\-sqfs_dir=<dir>          Where to find kernel modules
.Ve
.PP
Note: for finding modules we always specify the \*(L"root\*(R" directory and
never include the \*(L"lib/modules\*(R" because that gets added
automatically.
.SH "Template Directory"
.IX Header "Template Directory"
We also need access to our own template directory.  This should be
mostly independent of a particular version or release.  Each distro
has its own template directory even though most contents are
similar or identical.   By default, we first look for the template
directory at:
.PP
.Vb 1
\&    /usr/share/live\-multi\-kernel/template/$DISTRO/
.Ve
.PP
If that is not found we then look locally at:
.PP
.Vb 1
\&    ./LMK\-Template/$DISTRO/
.Ve
.PP
You can also specify the template location manually with the option
\&\f(CW\*(C`\-\-template=<dir\*(C'\fR.
.PP
A template directory typically contains the follow files:
.PP
These are for setting the position of the title and subtitle on the
Syslinux gfxboot background imagine and for setting the position of
the main menu.
.IP "config" 4
.IX Item "config"
This file is optional.  It enables you to adjust almost any setting.
A example  set of settings:
.Sp
.Vb 6
\&    # Subtitle and menu can be relate to previous using leading +/\-.
\&    TITLE_POS="250,125"
\&    SUB_TITLE_POS="+0,+30"
\&    MENU_POS="+0,+30"
\&    TITLE_FONT_SIZE=20
\&    SUB_TITLE_FONT_SIZE=18
.Ve
.Sp
Note that coordinates that begin with \*(L"+\*(R" or \*(L"\-\*(R" are relative to
the previous coordinates. So in the example above, the \s-1SUB_TITLE_POS\s0
will end up being \f(CW\*(C`250,155\*(C'\fR.
.IP "back800.jpg" 4
.IX Item "back800.jpg"
The gfxboot background image for the Syslinux bootloaders.
This image should not have additional text added to it.  Text
gets added by the \s-1LMK\s0 programs.
.IP "isolinux.cfg" 4
.IX Item "isolinux.cfg"
This is the top menu template for the Syslinux bootloaders.
.IP "kernel0.cfg" 4
.IX Item "kernel0.cfg"
The template for the first kernel menu.  Again, the first kernel will
be the one with the vmlinuz{.[0\-9]} name that comes first
alphabetically.
.IP "kernel1.cfg" 4
.IX Item "kernel1.cfg"
The template for the second kernel menu.
.IP "grub.cfg" 4
.IX Item "grub.cfg"
The template for a dual kernel grub.cfg that is designed to
fit within and use the antiX/MX live grub configuration designed
by fehlix.
.SH "OPERATION"
.IX Header "OPERATION"
\&...
.SH "LICENSE"
.IX Header "LICENSE"
GPLv3
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2021
antiX Linux <http://antixlinux.org/>
.ex
