#!/bin/bash
ME=${0##*/}

VERSION="2.00.04"
VERSION_DATE="Sun Apr 25 11:20:22 PM MDT 2021"

SEP="|"

CREATED_VARS="
ASCII_CODE_NAME
DISTRO
FULL_DISTRO_NAME
FULL_DISTRO_NAME_SPACE
RELEASE_DATE"

CONF_FILES=(
boot/grub/grub.cfg
boot/grub/theme/help.txt
boot/grub/theme/theme.txt
boot/isolinux/isolinux.cfg
boot/isolinux/readme.msg
boot/syslinux/readme.msg
boot/syslinux/syslinux.cfg)

DATA_FILES=()
IN_FILES=()
FILES=()

# This should match all variable names we use for subtitution
CHARS="[A-Z][A-Z0-9_]{2,}"


usage() {
    local ret=${1:-0}

     cat <<Usage
Usage:  $ME [options] file1, file2, dir, ...

Perform simple string substitutions on the files listed on the command line
based on the information in the data file(s).

Options:
  -a  --antiX              Use antiX-data data file
  -d  --data=<file>        Use <file> as the data file
  -f  --flavour=<flav>     Use <flav> as the flavour
  -h  --help               Show this usage
  -i  --in-place<=SUFFIX>  Change files in-place
                           Make backup if suffix is supplied
  -m  -MX                  Use MX-data data file
  -p  --pretend            Don't Change the files, just show the new lines
  -r  --release=<date>     Use <date> as the release date
  -s  --strict             Error out if a file is not found or if
                             there seems to be a problem with substitution
  -V  --vars               Just show the variable names then exit

If a directory is specified then we operate on these files under that
directory:$(echo "${CONF_FILES[@]}" | sed 's/^/    /')

These variables will be created if they aren't defined in a data file:
    $(echo $CREATED_VARS)
Usage

    exit $ret
}

eval_argument() {
    local arg=$1 val=$2
    case $arg in
           -antiX|a)  DATA_FILES+=(antiX-data)                 ;;
            -data|d)  DATA_FILES+=("$val")                     ;;
        -data=*|d=*)  DATA_FILES+=("$val")                     ;;
         -flavour|f)  FLAVOUR=$val                             ;;
     -flavour=*|f=*)  FLAVOUR=$val                             ;;
            -help|h)  usage                                    ;;
        -in-place|i)  IN_PLACE=--in-place                      ;;
                 i*)  IN_PLACE=${arg#i}                        ;;
        -in-place=*)  IN_PLACE=$val                            ;;
              -MX|m)  DATA_FILES+=(MX-data)                    ;;
         -pretend|p)  PRETEND=true                             ;;
         -release|r)  RELEASE_DATE=$val                        ;;
     -release=*|r=*)  RELEASE_DATE=$val                        ;;
          -strict|s)  STRICT=true                              ;;
            -vars|V)  SHOW_VARS=true                           ;;
                  *)  fatal "Unknown argument: -$arg"          ;;
    esac
}

takes_param() {
    case $1 in
        -data|-flavour|-release|[dfr]) return 0 ;;
    esac
    return 1
}

main() {
    local SHIFT SHORT_STACK="adfhmprsV"
    [[ $# -eq 0 ]] && usage

    while [[ $# -gt 0 ]]; do
        read_params "$@"
        shift $SHIFT

        while [[ $# -gt 0 && ! $1 =~ ^- ]]; do
            #echo "file $1"
            IN_FILES+=($1)
            shift
        done
    done

    [[ ${#IN_FILES[@]} -lt 1 ]] && fatal "Expected at least one filename"

    [[ ${#DATA_FILES[@]} -eq 0 ]] && DATA_FILES=(antiX-data)

    local regex="s/^\s*($CHARS)(=.*)?$/\1/p"
    VAR_NAMES=$(sed -n -r "$regex" "${DATA_FILES[@]}" <(echo "$CREATED_VARS") | sort)

    if [[ -n "$SHOW_VARS" ]]; then
        echo "$VAR_NAMES"
        exit 0
    fi

    local data_file
    for data_file in "${DATA_FILES[@]}"; do
        [[ -z "$data_file" ]] && continue
        test -r "$data_file" || fatal "Could not read data file: $data_file"
        source "$data_file"
    done

    # Create DISTRO, ASCII_CODE_NAME, FULL_DISTRO_NAME, RELEASE,
    # and FULL_DISTRO_NAME_SPACE variables as needed
    : ${DISTRO:=$DISTRO_NAME-${DISTRO_VERSION}}
    : ${ASCII_CODE_NAME:=$(echo "$CODE_NAME" | utf8_to_ascii)}

    if [[ -z "$FULL_DISTRO_NAME" ]]; then
        FULL_DISTRO_NAME="${DISTRO}_$ISO_ARCH"
        [[ -n "$FLAV" ]] && FULL_DISTRO_NAME=$FULL_DISTRO_NAME-$FLAV
    fi

    : ${RELEASE_DATE:=$(date +"%-e %B %Y")}

    : ${FULL_DISTRO_NAME_SPACE:=$FULL_DISTRO_NAME}
    FULL_DISTRO_NAME_SPACE=${FULL_DISTRO_NAME_SPACE//_/ }

    # create SED and SED_P variables
    build_sed_exprs

    # Put expanded list in FILES
    expand_dirs "${IN_FILES[@]}"

    local file
    for file in "${FILES[@]}"; do

        test -e "$file" || loop_warn "Could not find file: $file" || continue
        test -r "$file" || loop_warn "Can not read file: $file"   || continue
        [[ -z $IN_PLACE ]] \
            || test -w "$file" || loop_warn "Can not write to file: $file" || continue

        if [[ -n $PRETEND ]]; then
            echo "FILE $file:"
            eval "sed -n $SED_P \"$file\"" | grep -E -v "%=$CHARS=%"
            echo
        else
            eval "sed $IN_PLACE $SED '$file'"

            # Check for %=...=% placeholders
            if [[ -n $IN_PLACE ]]; then
                local oops=$(grep -E -o \
                    -e "%=$CHARS=%"     \
                    -e "%=$CHARS"       \
                     -e "$CHARS=%" "$file" | sort -u)
                [[ -z $oops ]] && continue
                loop_warn "\nUnmatched pattern(s) in $file\n$(echo $oops)"
            fi
        fi

    done
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
build_sed_exprs() {
    local name val
    for name in $VAR_NAMES; do
        eval val=\$$name
        SED="$SED -e \"s$SEP%\(=\?\)$name\1%$SEP$val${SEP}g\""
        SED_P="$SED_P -e \"s$SEP%\(=\?\)$name\1%$SEP$val${SEP}gp\""
    done
}

#------------------------------------------------------------------------------
# Read in variable assignments from a file, like sourcing the file but safer
# and with built-in error checks so we only have to write them once
#------------------------------------------------------------------------------
read_data() {
    local file=$1
    test -e "$file" || fatal "Could not find file $file"
    test -r "$file" || fatal "Can not read file $file"
    bash -n "$file" || fatal "Bash errors in file $file"
    eval $(sed -r -n 's/^\s*([A-Z0-9_]+=[^$`;]+)$/\1/p' "$file")
}

#------------------------------------------------------------------------------
# If any input "files" are directories then look for our standard config files
# under that directory.  If they exist, add them to the list.
#------------------------------------------------------------------------------
expand_dirs() {
    local file
    for file; do

        if ! test -d $file; then
            FILES+=("$file")
            continue
        fi

        local dir=${file%/}
        local found=  conf
        for conf in "${CONF_FILES[@]}"; do
            file="$dir/$conf"
            test -f "$file" || continue
            FILES+=("$file")
            found=true
        done

        [[ -z "$found" ]] && loop_warn "No config files found under directory: $dir"
    done

}

#------------------------------------------------------------------------------
# Convert utf8 to ascii.  This is for making the ASCII_CODE_NAME
#------------------------------------------------------------------------------
utf8_to_ascii() {
    iconv -f utf-8 -t ascii//translit
}

#-------------------------------------------------------------------------------
# Send "$@".  Expects
#
#   SHORT_STACK               variable, list of single chars that stack
#   fatal(msg)                routine,  fatal("error message")
#   takes_param(arg)          routine,  true if arg takes a value
#   eval_argument(arg, [val]) routine,  do whatever you want with $arg and $val
#
# Sets "global" variable SHIFT to the number of arguments that have been read.
#-------------------------------------------------------------------------------
read_params() {
    # Most of this code is boiler-plate for parsing cmdline args
    SHIFT=0
    # These are the single-char options that can stack

    local arg val

    # Loop through the cmdline args
    while [[ $# -gt 0 && $1 =~ ^- ]]; do
        arg=${1#-}
        shift
        SHIFT=$((SHIFT + 1))

        # Expand stacked single-char arguments
        case $arg in
            [$SHORT_STACK][$SHORT_STACK]*)
                if echo "$arg" | grep -q "^[$SHORT_STACK]\+$"; then
                    local old_cnt=$#
                    set -- $(echo $arg | sed -r 's/([a-zA-Z])/ -\1 /g') "$@"
                    SHIFT=$((SHIFT - $# + old_cnt))
                    continue
                fi;;
        esac

        # Deal with all options that take a parameter
        if takes_param "$arg"; then
            [[ $# -lt 1 ]] && fatal "Expected a parameter after: -$arg"
            val=$1
            [[ $val =~ ^- ]] \
                && fatal "Suspicious argument after -$arg: $val"
            SHIFT=$((SHIFT + 1))
            shift
        else
            case $arg in
                *=*)  val=${arg#*=} ;;
                  *)  val="???"     ;;
            esac
        fi

        eval_argument "$arg" "$val"
    done
}

loop_warn() {
    [[ -n $STRICT ]] && fatal "$@"
    echo -e "$ME warning: $*" >&2
    return 1
}


fatal() {
    echo -e "$ME error: $*" >&2
    exit 2
}

main "$@"

